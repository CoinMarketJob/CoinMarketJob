generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = "mysql://admin:gQK6YoNsBL8U11QMWkrP@cmj-main-database.cw1sl1nanwvx.eu-north-1.rds.amazonaws.com:3306/coinmarketjob"
}

model User {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  hashedPassword    String
  createdAt         DateTime @default(now())
  updatedAt         DateTime?
  emailVerified     DateTime?

  jobs              Job[]
  savedJobs         SavedJobs[]
  appliedJobs       AppliedJobs[]
  jobAlerts         JobAlerts[]
  profile           Profile?
  companyProfile    CompanyProfile?
  buyedPackages     BuyedPackage[]
}

model Job {
  id                Int      @id @default(autoincrement())
  userId            Int
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  logo              String
  companyName       String
  jobTitle          String
  location          String
  jobType           JobType
  experienceLevel   ExperienceLevel
  educationalDegree EducationalDegree
  salaryMin         Int
  salaryMax         Int
  visaSponsorship   Boolean
  jobDescription    Json
  packageId         Int
  package           BuyedPackage  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  savedJobs         SavedJobs[]
  appliedJobs       AppliedJobs[]
}


enum JobType {
  Internship
  PartTime
  FullTime
  Contract
  Temporary
  other
}

enum ExperienceLevel {
  EntryLevel
  Junior
  MidLevel
  Senior
  Lead
  Manager
  Executive
}

enum EducationalDegree {
  HighSchool
  University
  Master
  PhD
}

model SavedJobs {
  id                Int      @id @default(autoincrement())
  userId            Int
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobId             Int
  job               Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  date              DateTime @default(now())
  
  @@unique([userId, jobId])
}

model AppliedJobs {
  id                Int      @id @default(autoincrement())
  userId            Int
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobId             Int
  job               Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  name              String
  surname           String
  email             String
  phoneCode         String
  phone             String
  date              DateTime @default(now())

  resumeLink        String?
  resumeDraft       Json?

  coverLetterLink   String?
  coverLetterDraft  Json?

  visaSponsorship   Boolean
  
  
  @@unique([userId, jobId])
}

model News {
  id      Int    @id @default(autoincrement())
  logo    String
  summary String
}

model Hacks {
  id      Int    @id @default(autoincrement())
  logo    String
  name    String
  companyName String
  date    String
  prize   Int
  location  String
}

model JobTitles {
  id        Int    @id @default(autoincrement())
  jobTitle  String
}

model Cities {
  id        Int    @id @default(autoincrement())
  city      String
}

model JobAlerts {
  id                  Int    @id @default(autoincrement())
  userId              Int
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  jobTypes            String
  experienceLevels    String
  educationalDegrees  String
  visaSponsorship     Boolean
  salaryMin           Int
  salaryMax           Int
  location            String
  date                DateTime
}

model Profile {
  id                  Int    @id @default(autoincrement())
  userId              Int @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  logoURL             String
  jobTitle            String
  location            String
  headline            String
  siteUrl             String
  about               Json? 
  sectionsOrder       String?

  socialMedias        SocialMedia[]  
  section             ProfileSection[]
}

model CompanyProfile {
  id                  Int    @id @default(autoincrement())
  userId              Int @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  logoURL             String
  companyName         String
  headline            String
  siteUrl             String
  about               Json?

  socialMedias        SocialMediaCompany[]  

}
model SocialMedia {
  id                  Int    @id @default(autoincrement())
  profileId           Int
  profile             Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  socialMediaType     socialMediaType
  socialMediaUrl      String
}

model SocialMediaCompany {
  id                  Int    @id @default(autoincrement())
  profileId           Int
  profile             CompanyProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  socialMediaType     socialMediaType
  socialMediaUrl      String
}

enum socialMediaType {
  LinkedIn
  X
  Facebook
  Instagram
  GitHub
}

model BuyedPackage {
  id                  Int    @id @default(autoincrement())
  userId              Int
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  packageType         PackageType
  subscriptionDate    DateTime @default(now())
  expirationDate      DateTime?

  jobs Job[]
}

enum PackageType {
  OneJob
  FiveJob
  Monthly
}

model ProfileSection {
  id                  Int    @id @default(autoincrement())
  profileId           Int
  profile             Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  sectionType         SectionType
  title               String
  from                String
  to                  String
  institution         String
  location            String
  description         Json?


  attachments Attachments[]
}

enum SectionType {
  WorkExperience
  Volunteering
  Education
  Certifications
  Projects
  Publications
  Awards
}

model Attachments {
  id                  Int    @id @default(autoincrement())
  sectionId           Int
  section             ProfileSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  attachmentUrl       String
}

model Live {
  id           Int           @id @default(autoincrement())
  title        String
  liveType     LiveType
  organisation String
  headline     String
  content      String
}

enum LiveType{
  News
  HACKHATHONS
  BLOG
}

